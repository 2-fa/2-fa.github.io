{"name":"Infobip 2-Factor Authentication Web API","tagline":"","body":"# Infobip 2-factor authentication API\r\n\r\n**2-factor authentication** (2FA) is cloud messaging security solution that confirms the identity of the user and protects the system from phishing or hacking attacks.\r\n\r\nA one-time PIN (PIN code) is generated and sent to the user's mobile phone. The user receives the PIN code and types it into the application to confirm his or her identity. If the PIN number that was sent out to the user matches the one that is received, the user is allowed to continue with the process.\r\n\r\n##2FA flow overview\r\n\r\n![enter image description here](http://i59.tinypic.com/2pq9cbc.png)\r\n\r\n 1. User enter his Phone number into the client's application (mobile or web). The other option is that client pulls the phone number from his user's database.\r\n 2. Application sends the request for the PIN code with user’s phone number to Infobip\r\n 3. Infobip sends Number context lookup request to the MNO for user’s phone number\r\n 4. Infobip receives Number context lookup response from the MNO\r\n 5. Infobip sends Number context response to the Application\r\n 6. If the Number context result is valid, Infobip generates the PIN code and send it via SMS\r\n 7. MNO delivers SMS with the PIN code\r\n 8. Infobip receives Delivery report for sent message\r\n 9. User enters the received PIN code into the application\r\n 10. Application sends verification request with the PIN code\r\n 11. Infobip verifies the received PIN and sends the response to the application\r\n\r\n>**Note:**\r\n>**Steps 3** and **4** are important for the clients that want to check whether the user entered valid phone number before sending a verification SMS. We use Number context to check the phone number validity. If the phone number is not valid (i.e. doesn’t exists) we do not even generate the PIN code and send the SMS. This way we prevent unnecessary expenditures for our clients. [These steps are optional](#request-query-parameters) due to customer needs.\r\n\r\n\r\n\r\n## Base URL \r\n\r\nYou should submit all requests to the base URL. All the requests are submitted thorough HTTP `POST`, `PUT` or `GET` method. Although you can use HTTP protocol, we strongly recommend you to submit all requests to Infobip SMS API over HTTPS so the traffic is encrypted and the privacy is ensured.\r\n\r\n**Base URL:  `https://oneapi.infobip.com/2fa`**\r\n\r\n## Authorization\r\n\r\nIn order to use Infobip 2-FA API, you have to be authorized. We support two types of authorization:\r\n\r\n - [Basic authorization](#basic-authorization) used for [service configuration](#service-configuration)\r\n - [API key authorization](#api-key-authorization) used for [client side methods](#client-side-methods)\r\n\r\n### Basic authorization\r\n\r\nWe support the Basic authorization with username and password using Base64 encoding variation RFC2045-MIME\r\n\r\nThe Authorization header is constructed as follows:\r\n\r\n1. Username and password are combined into a string `username:password`.\r\n2. The resulting string is encoded using the RFC2045-MIME variant of Base64.\r\n3. The authorization method and a space `\"Basic \"` are put before the encoded string.\r\n\r\n>**Example:**\r\n>\r\n>*Username:* Aladdin\r\n>*Password:* open sesame \r\n>\r\n>**Authorization:** Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\r\n\r\n### API key authorization\r\n\r\nIn order to use a client side methods, you need a valid Infobip API key. \r\n\r\nIf you don't have an API key, you can create one using a [Generate API key method](#api-key).  When you receive your API key, you should put it in the header after the authorization method and space i.e. `\"App \"`.\r\n\r\n>**Example:**\r\n>\r\n>*API key:* e78d84e20207873482d160c1144f7d08-59304bb3-11fa\r\n\r\n>**Authorization:** App e78d84e20207873482d160c1144f7d08-59304bb3-11fa\r\n\r\n##One Time PIN generation algorithm\r\n\r\nWe used a variant of [Time-based One-Time Password (TOTP)](http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm) algorithm (in compliance with [RFC 6238](http://tools.ietf.org/html/rfc6238)) for generating PINs. We combine secret key with current timestamp to seed secure pseudo-random number generator (512-bit time-dependent seed) which in turn produces 512-bit pseudo-random number which is an input to SHA512, along with time-dependent key. We reseed [PRNG](http://en.wikipedia.org/wiki/Pseudorandom_number_generator) periodically with time-based pseudo-random seed, but time-independently of hashing algorithm input time-dependent key.\r\n\r\n>**Note:** http://www.faqs.org/rfcs/rfc2104.html\r\n>\r\n...for a block length of 64 bytes this [\"birthday attack\" on 128-bit MD5] would take 250,000 years in a continuous 1Gbps link, and without changing the secret key K during all this time...\r\n\r\nWe don't use MD5, we use **HmacSHA512** ([SHA functions comparison](http://en.wikipedia.org/wiki/SHA-2#Comparison_of_SHA_functions)), which is much more resistant to this type of attack. Paired with dynamically seeded PRNG and time-dependant key, one would only have a few seconds to try this kind of attack on hashing function before it's key is changed. And this attack becomes possible only if PRNG is also breaked, which is as unfeasible as the very MD5 attack just presented (only in another terms).\r\n\r\nOther than that, the length of PIN code influences probability of repeating PINs, but an 6-digit numeric only PIN has 10^6 = 1.000.000 combinations (6-digit alphanumeric ~> 10^11 combinations). So if you try to guess PIN code by brute forcing it's value, you have pretty low probability of guessing it blindly. And, when you [setup your 2FA application](#service-configuration), you can [limit the number of verification attempts](#application-configuration-details) to arbitrary value, further limiting lucky guesses.\r\n\r\n## Step by step integration\r\n\r\n 1. **[Service configuration](#service-configuration)**\r\n\t a. Create and configure your 2FA application\r\n\t b. Create and configure your 2FA message\r\n\t c. Generate your API key in order to use Client side methods\r\n\t \r\n 2. **[Client side methods](#client-side-methods)**\r\n\t a. Generate and send PIN code\r\n\t b. Verify PIN code\r\n\t c. Resend PIN code\r\n\t d. Get PIN code status\r\n\r\n >**Note:**\r\n >You can also **get** and **update** all your 2FA [applications](#application) and [messages](#message).\r\n\r\n\r\n###Application configuration details\r\n\r\n####**PIN Time To Live**\r\n\r\nPIN time to live represents how long the PIN will be active after it is generated. Within this time frame PIN could be verified. After PIN time to live expires, verification will not be possible. The old PIN will be discarded and the new one should be required. \r\n\r\n*Default value:* **900.000 milliseconds** (15 minutes)\r\n\r\n>***Example:*** Client sets PIN time to live to 45 seconds. If user tries to verify PIN after 50 seconds, the error will occur because PIN time to live has expired. In order to proceed further, the new PIN should be required. \r\n\r\n####**PIN Attempts**\r\n\r\nPIN attempts represents the number of overall PIN verification requests for one application (service) from one phone number (MSISDN) regardless time interval. If the overall PIN attempts are exceeded, verification will not be possible. The old PIN will be discarded and the new one should be required.\r\n\r\n*Default value:* **10**\r\n\r\n>***Example:*** Client sets PIN attempts to 3. The user enters wrong PIN for 3 times. With the forth attempt he tries to verify the correct PIN, verification will not be possible because PIN attempts are exceeded. In order to proceed  further, the new PIN should be required. \r\n\r\n####**Verification Attempts**\r\n\r\nVerification attempts represents the number of PIN verification requests from one phone number (MSISDN) in a defined verification time interval. If the repeated PIN verification is required before the time interval expires, verification will not be possible. It is necessary that defined verification time interval expires so the PIN verification attempt could be required for the second time. \r\n\r\n*Default value:* **1**\r\n\r\n>***Example:*** Client sets the Verification attempts to 1 and the verification time interval to 3 seconds (explained in the next step). User can try to verify the PIN only once in a 3 seconds from one phone number (MSISDN). \r\n\r\n####**Verification Interval Length**\r\n\r\nVerification interval length represent a defined time interval in which there can be no multiple (or whatever *Verification Attempts* is set to) PIN verification attempts. If the repeated PIN verification is requested before the time interval expires, verification will not be possible. It is necessary that defined verification time interval expires so the PIN verification attempt could be processed next time. \r\n\r\n*Default value:* **3.000 milliseconds** (3 seconds)\r\n\r\n>***Example:*** Client sets Verification attempts to 1 and the verification time interval to 3 seconds. User can try to verify the PIN only once in a 3 seconds from one phone number (MSISDN).\r\n\r\n####**Initiation Attempts**\r\n\r\nInitiation attempts represents the number of requests for generating a PIN and sending an SMS to one phone number (MSISDN) in a defined time interval. If the PIN generation requests from one phone number exceed the initiation attempts for defined time interval, further initiation requests will not be processed. It is necessary that defined time interval expires so the new PIN generation request and SMS sending could be performed.\r\n\r\n*Default value:* **3**\r\n\r\n>***Example:*** Client sets the Initiation attempts to 3 and the time interval to 1 day (explained in the next step). User can require a PIN generation and receiving of an SMS on one phone number max 3 times in one day. \r\n\r\n####**Initiation Interval Length**\r\n\r\nInitiation interval length represents a time interval in which a defined number of initiation attempts for one phone number (MSISDN) can be realized. If the PIN generation requests from one phone number exceed the initiation attempts for defined time interval, initiation attempts will not be processed. It is necessary that defined time interval expires so the new PIN generation request and sending SMS could be performed.\r\n\r\n*Default value:* **86.400.000 milliseconds** (1 day)\r\n\r\n>***Example:*** Client sets the Initiation attempts to 3 and the Initiation interval length to 1 day. User can request PIN generation and receiving of SMS containing it, for one phone number, maximum 3 times in one day. \r\n\r\n\r\n#API endpoint reference list\r\n\r\n## Service configuration\r\n\r\n###Application\r\n\r\n| Method | Endpoint | Usage | Returns | Authorization |\r\n|-|-|-|-|-|\r\n| POST | [/1/applications](#create-application) | [Create an application](#create-application) | [application](#application-response-body-parameters) | [Basic](#basic-authorization) |\r\n| PUT | [/1/applications/{applicationId}](#update-application) | [Update an application](#update-application) | [application](#application-response-body-parameters) | [Basic](#basic-authorization) |\r\n| GET | [/1/applications](#get-applications)| [Get all applications](#get-applications) |[][application](#application-response-body-parameters)  | [Basic](#basic-authorization) |\r\n| GET | [/1/applications/{applicationId}](#get-applications) | [Get an application by ID](#get-applications) | [application](#application-response-body-parameters) | [Basic](#basic-authorization) |\r\n\r\n###Message\r\n\r\n| Method | Endpoint | Usage | Returns | Authorization |\r\n|-|-|-|-|-|\r\n| POST | [/1/applications/{applicationId}/messages](#create-a-message) | [Create a message](#create-a-message) | [message](#message-response-body-parameters)| [Basic](#basic-authorization)|\r\n| PUT | [/1/applications/{applicationId}/messages/{messageId}](#update-a-message) | [Update a message](#update-a-message) | [message](#message-response-body-parameters)| [Basic](#basic-authorization)|\r\n|GET|[/1/applications/{applicationId}/messages](#get-messages)|[Get all messages](#get-messages)|[][message](#message-response-body-parameters) | [Basic](#basic-authorization) |\r\n| GET | [/1/applications/{applicationId}/messages/{messageId}](#get-messages) | [Get a message by ID](#get-messages)| [message](#message-response-body-parameters)| [Basic](#basic-authorization) | \r\n\r\n### API key\r\n\r\n| Method | Endpoint | Usage | Returns | Authorization |\r\n|-|-|-|-|-|\r\n| POST | [/1/api-key](#generate-an-api-key) | [Generate an API key](#generate-an-api-key) | apiKey | [Basic](#basic-authorization) |\r\n\r\n\r\n## Client side methods\r\n\r\n### PIN\r\n| Method | Endpoint | Usage | Returns | Authorization |\r\n|-|-|-|-|-|\r\n| POST | [/1/pin](#send-a-pin) | [Send a PIN](#send-a-pin) | [sendPinResponse](#send-a-pin-response) | [API key](#api-key-authorization)|\r\n| POST | [/1/pin/{pinId}/verify](#verify-a-pin) | [Verify a PIN](#verify-a-pin) | [verifyPinResponse](#verify-pin-response)| [API key](#api-key-authorization)|\r\n| POST | [/1/pin/{pinId}/resend](#resend-a-pin) | [Resend a PIN](#resend-a-pin) | [sendPinResponse](#resend-pin-response) | [API key](#api-key-authorization) |\r\n| GET | [/1/pin/{pinId}/status](#get-pin-status) | [Get PIN status](#get-pin-status)| [getPinStatusResponse](#get-pin-status-response) | [API key](#api-key-authorization)|\r\n\r\n### Verifications\r\n\r\n| Method | Endpoint | Usage | Returns | Authorization |\r\n|-|-|-|-|-|\r\n| GET | [/1/applications/{applicationId}/verifications](#check-is-msisdn-verified)| [Check is MSISDN verified](#check-is-msisdn-verified)| [verificationStatusObject](#check-verification-status-response) | [API key](#api-key-authorization) | \r\n\r\n\r\n#API methods usage\r\n\r\n## Create application\r\n \r\nThis method allows you to create 2FA application.\r\n\r\nFor creating a 2FA application you should use the `HTTP POST` method and the base URL with following end point:\r\n\r\n**End point:** `/1/applications`\r\n<br>\r\n|Header field|Description|\r\n|:----|:----------|\r\n|*Authorization*|**Required.** [Basic](#basic-authorization) + Base64(username:password).\r\n|Content-type| **Required.** The content type of the request body: ``application/json``|\r\n\r\n###Request body parameters\r\n\r\n|Parameter|Type|Description|\r\n|:----|:----|:----------|\r\n|*name*|String|**Required.** 2FA application name.|\r\n|*enabled*|Boolean|**Optional.** Enabling or disabling 2FA application. <br><br> You can start 2-factor authentication process only if the 2FA application is enabled. Default value of this parameter is **true**.|\r\n|*configuration*|[ApplicationConfiguration](#applicationconfiguration)|**Optional.**  2FA application configuration object.|\r\n\r\n#### ApplicationConfiguration\r\n\r\n|Parameter|Type|Description|\r\n|:----|:----|:----------|\r\n|*pinTimeToLive*|Long|**Optional.** PIN time to live (in millis).<br><br>*Default value:* 900.000 milliseconds (15 minutes)|\r\n|*pinAttempts*|Integer|**Optional.** Number of possible PIN attempts.<br><br>*Default value:* 10|\r\n|*verificationAttempts*|Integer|**Optional.** Number of PIN verification requests from one phone number (MSISDN) in a defined verification time interval.<br><br>*Default value:* 1|\r\n|*verificationIntervalLength*|Long|**Optional.** Verification time interval (in millis).<br><br>*Default value:* 3.000 milliseconds (3 seconds)|\r\n|*initiationAttempts*|Integer|**Optional.** Number of requests for generating a PIN and sending an SMS to one phone number (MSISDN) in a defined time interval.<br><br>*Default value:* 3|\r\n|*initiationIntervalLength*|Long|**Optional.** Time interval in which a defined number of initiation attempts for one phone number (MSISDN) can be realized.<br><br>*Default value:* 86.400.000 milliseconds (1 day)|\r\n\r\n>**Note:**\r\n>Find out more about Application configuration details [here](#application-configuration-details).\r\n\r\n### Response format\r\n\r\nOn success, response header HTTP status code will be `200 OK`  and the body will contain created [application object](#application-response-body-parameters) in JSON format. \r\n\r\nOn error, you will receive an [error response status code](#response-status-codes) in the header and the response body will contain an [error object](#error-object). If you try to create an application when you do not have the user’s authorization, you will receive an error `401` Unauthorized.\r\n\r\n#### Application response body parameters\r\n\r\n|Parameter|Type|Description|\r\n|-|-|-|\r\n|*applicationId*|String|2FA application ID.|\r\n|*name*|String|2FA application name.|\r\n|*enabled*|Boolean|Indicates if the created application is enabled.|\r\n|*processId*|String|Process tracking ID. <br><br>You can track conversion rate across 2FA process using multiple parameters (find more information [here](http://developer.infobip.com/api#!/ConversionRate \"Conversion rates\")).|\r\n|*configuration*|[ApplicationConfiguration](#applicationconfiguration)|Created 2FA application configuration.|\r\n\r\n<br>\r\n>**Note:**\r\n>Find out more about Application configuration details [here](#application-configuration-details).\r\n\r\n### Example\r\n\r\n#### Basic request (required parameters only)\r\n\r\nThe only required parameter is the `name` of the application. For a basic usage, you can just set the name of the app and the other parameters will be set to the [default values](#application-configuration-details).\r\n```\r\nPOST /2fa/1/applications HTTP/1.1\r\nHost: oneapi.infobip.com\r\nAuthorization: Basic RkTpGSVR0lUdGVhbZWFt\r\nContent-Type: application/json\r\n\r\n{\r\n  \"name\":\"Test applicatio BASIC\"\r\n}\r\n```\r\n#### Response\r\n```\r\n{\r\n \"applicationId\": \"CD265875E3A6EA43478D5F37A635BE4A\",\r\n \"name\": \"Test application BASIC\",\r\n \"configuration\": {\r\n  \"pinTimeToLive\": 1800000,\r\n  \"pinAttempts\": 3,\r\n  \"verificationAttempts\": 2,\r\n  \"verificationIntervalLength\": 10000,\r\n  \"initiationAttempts\": 5,\r\n  \"initiationIntervalLength\": 1800000,\r\n  \"overallInitiationAttempts\": 10000,\r\n  \"overallInitiationIntervalLength\": 86400000,\r\n  \"initiationThrottlingProlongationFactor\": 1,\r\n  \"initiationThrottlingWaitPeriod\": 0\r\n },\r\n \"enabled\": true,\r\n \"processId\": \"F3F887000261BC35CADFADCC947F7EF8\"\r\n}\r\n```\r\n\r\n#### Advanced Request\r\n\r\nAdvanced usage example represent the request with all available parameters (required and optional).\r\n\r\n```\r\nPOST /2fa/1/applications HTTP/1.1\r\nHost: oneapi.infobip.com\r\nAuthorization: Basic RkTpGSVR0lUdGVhbZWFt\r\nContent-Type: application/json\r\n\r\n{\r\n  \"name\":\"Test application ADVANCED\",\r\n  \"enabled\":true,\r\n  \"configuration\":{\r\n    \"pinTimeToLive\":2000000,\r\n    \"pinAttempts\":5,\r\n    \"verificationAttempts\":3,\r\n    \"verificationIntervalLength\":12000,\r\n    \"initiationAttempts\":8,\r\n    \"initiationIntervalLength\":1800000,\r\n    \"overallInitiationAttempts\":10000,\r\n    \"overallInitiationIntervalLength\":86400000\r\n  }\r\n}\r\n```\r\n\r\n#### Response\r\n```\r\n{\r\n \"applicationId\": \"HJ675435E3A6EA43432G5F37A635KJ8B\",\r\n \"name\": \"Test application ADVANCED\",\r\n \"configuration\": {\r\n  \"pinTimeToLive\": 2000000,\r\n  \"pinAttempts\": 5,\r\n  \"verificationAttempts\": 3,\r\n  \"verificationIntervalLength\": 12000,\r\n  \"initiationAttempts\": 8,\r\n  \"initiationIntervalLength\": 1800000,\r\n  \"overallInitiationAttempts\": 10000,\r\n  \"overallInitiationIntervalLength\": 86400000,\r\n  \"initiationThrottlingProlongationFactor\": 1,\r\n  \"initiationThrottlingWaitPeriod\": 0\r\n },\r\n \"enabled\": true,\r\n \"processId\": \"F3F887000261BC35CADFADCC947F7EF8\"\r\n}\r\n```\r\n\r\n## Update application\r\n\r\nThis method allows you to update 2FA application that is already created.\r\n\r\nFor updating a 2FA application you should use the `HTTP PUT` method and the base URL with following end point:\r\n\r\n**End point:** `/1/applications/{applicationId}`\r\n<br>\r\n|Header field|Description|\r\n|:----|:----------|\r\n|*Authorization*|**Required.** [Basic](#basic-authorization) + Base64(username:password).\r\n|Content-type| **Required.** The content type of the request body: ``application/json``|\r\n\r\n###Request path parameters\r\n\r\n|Parameters|Type|Description|\r\n|-|-|-|\r\n|*applicationId*|String|**Required.** 2FA application ID that should be updated.|\r\n\r\n###Request body parameters\r\n\r\n|Parameter|Type|Description|\r\n|:----|:----|:----------|\r\n|*name*|String|**Optional.** 2FA application name.|\r\n|*enabled*|Boolean|**Optional.** Enabling or disabling 2FA application. <br><br> You can start 2-factor authentication process only if the 2FA application is enabled. Default value of this parameter is **true**.|\r\n|*configuration*|[ApplicationConfiguration](#applicationconfiguration-1)|**Optional.**  2FA application configuration object.|\r\n\r\n#### ApplicationConfiguration\r\n\r\n|Parameter|Type|Description|\r\n|:----|:----|:----------|\r\n|*pinTimeToLive*|Long|**Optional.** PIN time to live (in millis).<br><br>*Default value:* 900.000 milliseconds (15 minutes)|\r\n|*pinAttempts*|Integer|**Optional.** Number of possible PIN attempts.<br><br>*Default value:* 10|\r\n|*verificationAttempts*|Integer|**Optional.** Number of PIN verification requests from one phone number (MSISDN) in a defined verification time interval.<br><br>*Default value:* 1|\r\n|*verificationIntervalLength*|Long|**Optional.** Verification time interval (in millis).<br><br>*Default value:* 3.000 milliseconds (3 seconds)|\r\n|*initiationAttempts*|Integer|**Optional.** Number of requests for generating a PIN and sending an SMS to one phone number (MSISDN) in a defined time interval.<br><br>*Default value:* 3|\r\n|*initiationIntervalLength*|Long|**Optional.** Time interval in which a defined number of initiation attempts for one phone number (MSISDN) can be realized.<br><br>*Default value:* 86.400.000 milliseconds (1 day)|\r\n\r\n<br>\r\n>**Note:**\r\n>Find out more about Application configuration details [here](#application-configuration-details).\r\n\r\n### Response Format\r\n\r\nOn success, response header HTTP status code will be `200 OK`  and the body will contain updated [application object](#application-response-body-parameters) in JSON format. \r\n\r\nOn error, you will receive an [error response status code](#response-status-codes) in the header and the response body will contain an [error object](#error-object). If you try to update the application when you do not have the user’s authorization, you will receive an error `401` Unauthorized.\r\n\r\n#### Response body parameters\r\n\r\n|Parameter|Type|Description|\r\n|-|-|-|\r\n|*applicationId*|String|2FA application ID.|\r\n|*name*|String|2FA application name.|\r\n|*enabled*|Boolean|Indicates if the created application is enabled.|\r\n|*processId*|String|Process tracking ID. <br><br>You can track conversion rate across 2FA process using multiple parameters (find more information [here](http://developer.infobip.com/api#!/ConversionRate \"Conversion rates\")).|\r\n|*configuration*|[ApplicationConfiguration](#applicationconfiguration-1)|Created 2FA application configuration.|\r\n\r\n<br>\r\n>**Note:**\r\n>Find out more about Application configuration details [here](#application-configuration-details).\r\n\r\n### Example\r\n\r\n#### Request\r\n\r\nAll body parameters are optional, so only provided parameters will be updated. \r\n```\r\nPUT /2fa/1/applications/CD265875E3A6EA43478D5F37A635BE4A HTTP/1.1\r\nHost: oneapi.infobip.com\r\nAuthorization: Basic RkTpGSVR0lUdGVhbZWFt\r\nContent-Type: application/json\r\n\r\n{\r\n  \"name\":\"New application name\",\r\n  \"enabled\":true,\r\n  \"configuration\":{\r\n    \"pinAttempts\":5\r\n  }\r\n}\r\n```\r\n#### Response\r\n```\r\n{\r\n \"applicationId\": \"CD265875E3A6EA43478D5F37A635BE4A\",\r\n \"name\": \"New application name\",\r\n \"configuration\": {\r\n  \"pinTimeToLive\": 1800000,\r\n  \"pinAttempts\": 5,\r\n  \"verificationAttempts\": 2,\r\n  \"verificationIntervalLength\": 10000,\r\n  \"initiationAttempts\": 5,\r\n  \"initiationIntervalLength\": 1800000,\r\n  \"overallInitiationAttempts\": 10000,\r\n  \"overallInitiationIntervalLength\": 86400000,\r\n  \"initiationThrottlingProlongationFactor\": 1,\r\n  \"initiationThrottlingWaitPeriod\": 0\r\n },\r\n \"enabled\": true,\r\n \"processId\": \"F3F887000261BC35CADFADCC947F7EF8\"\r\n}\r\n```\r\n\r\n## Get application(s)\r\n\r\nThis method allows you to get all 2FA applications for your account. Also, you can get just one 2FA application identified by `applicationId`.\r\n\r\nFor getting 2FA application(s) you should use the `HTTP GET` method and the base URL with following end point:\r\n\r\n**End point for all applications:** `/1/applications`\r\n**End point for one application:** `/1/applications/{applicationId}`\r\n<br>\r\n|Header field|Description|\r\n|:----|:----------|\r\n|*Authorization*|**Required.** [Basic](#basic-authorization) + Base64(username:password).\r\n|Content-type| **Required.** The content type of the request body: ``application/json``|\r\n\r\n###Request path parameters\r\n\r\n|Parameters|Type|Description|\r\n|-|-|-|\r\n|*applicationId*|String|2FA application ID that you want to get.|\r\n\r\n### Response Format\r\n\r\nOn success, response header HTTP status code will be `200 OK`  and the body will contain received [application object](#application-response-body-parameters) in JSON format. \r\n\r\nOn error, you will receive an [error response status code](#response-status-codes) in the header and the response body will contain an [error object](#error-object). If you try to get the application(s) when you do not have the user’s authorization, you will receive an error `401` Unauthorized.\r\n\r\n#### Response body parameters\r\n\r\n|Parameter|Type|Description|\r\n|-|-|-|\r\n|*applicationId*|String|2FA application ID.|\r\n|*name*|String|2FA application name.|\r\n|*enabled*|Boolean|Indicates if the created application is enabled.|\r\n|*processId*|String|Process tracking ID. <br><br>You can track conversion rate across 2FA process using multiple parameters (find more information [here](http://developer.infobip.com/api#!/ConversionRate \"Conversion rates\")).|\r\n|*configuration*|[ApplicationConfiguration](#applicationconfiguration-2)|Created 2FA application configuration.|\r\n\r\n##### ApplicationConfiguration\r\n\r\n|Parameter|Type|Description|\r\n|:----|:----|:----------|\r\n|*pinTimeToLive*|Long|**Optional.** PIN time to live (in millis).<br><br>*Default value:* 900.000 milliseconds (15 minutes)|\r\n|*pinAttempts*|Integer|**Optional.** Number of possible PIN attempts.<br><br>*Default value:* 10|\r\n|*verificationAttempts*|Integer|**Optional.** Number of PIN verification requests from one phone number (MSISDN) in a defined verification time interval.<br><br>*Default value:* 1|\r\n|*verificationIntervalLength*|Long|**Optional.** Verification time interval (in millis).<br><br>*Default value:* 3.000 milliseconds (3 seconds)|\r\n|*initiationAttempts*|Integer|**Optional.** Number of requests for generating a PIN and sending an SMS to one \r\n\r\n...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}